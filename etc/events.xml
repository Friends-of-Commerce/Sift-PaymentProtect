<?xml version='1.0'?>
<config
	xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
	xsi:noNamespaceSchemaLocation='urn:magento:framework:Event/etc/events.xsd'
>
<!-- 2020-02-06 `customer_login`
1) @used-by \Magento\Customer\Model\Session::setCustomerAsLoggedIn():
	$this->_eventManager->dispatch('customer_login', ['customer' => $customer]);
https://github.com/magento/magento2/blob/2.0.0/app/code/Magento/Customer/Model/Session.php#L413
https://github.com/magento/magento2/blob/2.3.4/app/code/Magento/Customer/Model/Session.php#L438
2) @used-by \Magento\Customer\Model\Session::setCustomerDataAsLoggedIn()
	$this->_eventManager->dispatch('customer_login', ['customer' => $customerModel]);
https://github.com/magento/magento2/blob/2.0.0/app/code/Magento/Customer/Model/Session.php#L432
https://github.com/magento/magento2/blob/2.3.4/app/code/Magento/Customer/Model/Session.php#L459
-->
	<event name='customer_login'>
		<observer instance='Dfe\Sift\Observer\Customer\Login' name='Dfe\Sift\Observer\Customer\Login'/>
	</event>
<!-- 2020-02-10 `customer_logout`
@used-by \Magento\Customer\Model\Session::logout():
	if ($this->isLoggedIn()) {
		$this->_eventManager->dispatch('customer_logout', ['customer' => $this->getCustomer()]);
		$this->_logout();
	}
https://github.com/magento/magento2/blob/2.0.0/app/code/Magento/Customer/Model/Session.php#L455-L469
https://github.com/magento/magento2/blob/2.3.4/app/code/Magento/Customer/Model/Session.php#L482-L496 -->
	<event name='customer_logout'>
		<observer instance='Dfe\Sift\Observer\Customer\Logout' name='Dfe\Sift\Observer\Customer\Logout'/>
	</event>
<!-- 2020-02-06 `customer_register_success`
@used-by \Magento\Customer\Controller\Account\CreatePost::execute():
	$this->_eventManager->dispatch('customer_register_success', [
		'account_controller' => $this, 'customer' => $customer
	]);
https://github.com/magento/magento2/blob/2.0.0/app/code/Magento/Customer/Controller/Account/CreatePost.php#L239-L242
https://github.com/magento/magento2/blob/2.3.4/app/code/Magento/Customer/Controller/Account/CreatePost.php#L367-L371
-->
	<event name='customer_register_success'>
		<observer
			instance='Dfe\Sift\Observer\Customer\RegisterSuccess'
			name='Dfe\Sift\Observer\Customer\RegisterSuccess'
		/>
	</event>
<!-- 2020-02-10 `customer_save_after_data_object`
@used-by \Magento\Customer\Model\ResourceModel\CustomerRepository::save():
	$savedCustomer = $this->get($customer->getEmail(), $customer->getWebsiteId());
	$this->eventManager->dispatch('customer_save_after_data_object', [
		'customer_data_object' => $savedCustomer,
		'orig_customer_data_object' => $prevCustomerData,
		'delegate_data' => $delegatedNewOperation ? $delegatedNewOperation->getAdditionalData() : []
	]);
https://github.com/magento/magento2/blob/2.0.0/app/code/Magento/Customer/Model/ResourceModel/CustomerRepository.php#L226-L230
https://github.com/magento/magento2/blob/2.3.4/app/code/Magento/Customer/Model/ResourceModel/CustomerRepository.php#L274-L282 -->
	<event name='customer_save_after_data_object'>
		<observer
			instance='Dfe\Sift\Observer\Customer\SaveAfterDataObject'
			name='Dfe\Sift\Observer\Customer\SaveAfterDataObject'
		/>
	</event>
<!-- 2020-02-01 `sales_order_place_after`
@used-by \Magento\Sales\Model\Order::place():
	$this->_eventManager->dispatch('sales_order_place_after', ['order' => $this]);
https://github.com/magento/magento2/blob/2.0.0/app/code/Magento/Sales/Model/Order.php#L1061
https://github.com/magento/magento2/blob/2.3.4/app/code/Magento/Sales/Model/Order.php#L1191
2020-02-04
This event is fired:
	*) in the `webapi_rest` scope (not `frontend`) for a frontend order,
	*) in the `adminhtml` scope for a backend order.
I pass to Sift frontend orders only. -->
	<event name='sales_order_place_after'>
		<observer instance='Dfe\Sift\Observer\Sales\OrderPlaceAfter' name='Dfe\Sift\Observer\Sales\OrderPlaceAfter'/>
	</event>
<!-- 2020-01-31 `sales_quote_product_add_after`
@used-by \Magento\Quote\Model\Quote::addProduct():
	$this->_eventManager->dispatch('sales_quote_product_add_after', ['items' => $items]);
https://github.com/magento/magento2/blob/2.0.0/app/code/Magento/Quote/Model/Quote.php#L1631
https://github.com/magento/magento2/blob/2.3.4/app/code/Magento/Quote/Model/Quote.php#L1694
2020-02-04
This event is fired:
	*) in the `frontend` or `webapi_rest` scope for a frontend customer,
	*) in the `adminhtml` scope for a backend order.
2020-02-10
Magento also triggers the `sales_quote_add_item` event:
@see \Magento\Quote\Model\Quote::addItem():
	public function addItem(\Magento\Quote\Model\Quote\Item $item) {
		$item->setQuote($this);
		if (!$item->getId()) {
			$this->getItemsCollection()->addItem($item);
			$this->_eventManager->dispatch('sales_quote_add_item', ['quote_item' => $item]);
		}
		return $this;
	}
https://github.com/magento/magento2/blob/2.0.0/app/code/Magento/Quote/Model/Quote.php#L1527-L1542
https://github.com/magento/magento2/blob/2.3.4/app/code/Magento/Quote/Model/Quote.php#L1581-L1596
@see \Magento\Quote\Model\Quote::addProduct() calls `addItem()` for each quote item:
e.g. if a configurable product to be added to the cart,
then `addItem()` is called 2 times for the same `addProduct()`:
for a configurable parent item and for a configurable child item. -->
	<event name='sales_quote_product_add_after'>
		<observer instance='Dfe\Sift\Observer\Quote\ProductAddAfter' name='Dfe\Sift\Observer\Quote\ProductAddAfter'/>
	</event>
<!-- 2020-02-10
1) `sales_quote_remove_item`
@used-by \Magento\Quote\Model\Quote::removeItem():
	$this->_eventManager->dispatch('sales_quote_remove_item', ['quote_item' => $item]);
https://github.com/magento/magento2/blob/2.0.0/app/code/Magento/Quote/Model/Quote.php#L1504
https://github.com/magento/magento2/blob/2.3.4/app/code/Magento/Quote/Model/Quote.php#L1558
2) There is also the @see \Magento\Quote\Model\Quote::deleteItem() method,
and it does not trigger any the `sales_quote_remove_item` event,
but an item removal via the frontend UI calls the \Magento\Quote\Model\Quote::removeItem() method,
not `deleteItem()`. The call stack:
2.1) \Magento\Checkout\Controller\Cart\Delete::execute():
	$this->cart->removeItem($id);
https://github.com/magento/magento2/blob/2.0.0/app/code/Magento/Checkout/Controller/Cart/Delete.php#L21
https://github.com/magento/magento2/blob/2.3.4/app/code/Magento/Checkout/Controller/Cart/Delete.php#L31
2.2) \Magento\Checkout\Model\Cart::removeItem():
	$this->getQuote()->removeItem($itemId);
https://github.com/magento/magento2/blob/2.0.0/app/code/Magento/Checkout/Model/Cart.php#L538-L549
https://github.com/magento/magento2/blob/2.3.4/app/code/Magento/Checkout/Model/Cart.php#L556-L567
3) There is also the \Magento\Quote\Model\Quote::removeAllItems() method:
public function removeAllItems() {
	foreach ($this->getItemsCollection() as $itemId => $item) {
		if ($item->getId() === null) {
			$this->getItemsCollection()->removeItemByKey($itemId);
		}
		else {
			$item->isDeleted(true);
		}
	}
	return $this;
}
https://github.com/magento/magento2/blob/2.0.0/app/code/Magento/Quote/Model/Quote.php#L1510-L1525
https://github.com/magento/magento2/blob/2.3.4/app/code/Magento/Quote/Model/Quote.php#L1564-L1579
It does not trigger the `sales_quote_remove_item` event too, and it is callable via a frontend public controller
(despite the Lumia theme does not use it and does not provide an ability to clear the shopping cart
to a frontend visitor). The call stack:
3.1) \Magento\Checkout\Controller\Cart\UpdatePost::execute():
	switch ($updateAction) {
		case 'empty_cart':
			$this->_emptyShoppingCart();
			break;
https://github.com/magento/magento2/blob/2.0.0/app/code/Magento/Checkout/Controller/Cart/UpdatePost.php#L75-L78
https://github.com/magento/magento2/blob/2.3.4/app/code/Magento/Checkout/Controller/Cart/UpdatePost.php#L109-L111
3.2) \Magento\Checkout\Controller\Cart\UpdatePost::_emptyShoppingCart():
	$this->cart->truncate()->save();
https://github.com/magento/magento2/blob/2.0.0/app/code/Magento/Checkout/Controller/Cart/UpdatePost.php#L11-L25
https://github.com/magento/magento2/blob/2.3.4/app/code/Magento/Checkout/Controller/Cart/UpdatePost.php#L52-L66
3.3) \Magento\Checkout\Model\Cart::truncate():
	$this->getQuote()->removeAllItems();
https://github.com/magento/magento2/blob/2.0.0/app/code/Magento/Checkout/Model/Cart.php#L584-L594
https://github.com/magento/magento2/blob/2.3.4/app/code/Magento/Checkout/Model/Cart.php#L602-L612
2020-02-11 @todo "Handle the empty cart action": https://github.com/mage2pro/sift/issues/10 -->
	<event name='sales_quote_remove_item'>
		<observer instance='Dfe\Sift\Observer\Quote\RemoveItem' name='Dfe\Sift\Observer\Quote\RemoveItem'/>
	</event>
</config>